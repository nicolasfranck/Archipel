[% BLOCK get_raw_sparql_base_q %]
        SELECT DISTINCT ?doc ?lit ?title ?image ?av ?format
	WHERE
        {
                {(?lit ?score) pf:textMatch '"%lucene_query"~10' . } . 
                ?doc rdf:type oai:Record . 
                ?doc dcterms:title ?title . 
                ?doc owl:sameAs ?or . 
		{
			?doc ?p0 ?lit .
		}
		UNION
		{
			?concept ?p2 ?lit . 
			?doc ?p1 ?concept . 
		} .
		?doc dcterms:relation ?image . FILTER regex(str(?image), "still")
		?doc dcterms:format ?format . FILTER regex(str(?format),"Video") .
		?doc dcterms:relation ?av . FILTER regex(str(?av),"media") . 

       } ORDER BY DESC(?score) LIMIT %limit OFFSET %offset
[% END %]
[% BLOCK get_raw_sparql_base_q_count %]
	SELECT count(*)
        {
		{(?lit ?score) pf:textMatch '"%lucene_query"~10' . } .
                ?doc rdf:type oai:Record .
                ?doc dcterms:title ?title .
                ?doc owl:sameAs ?or . 
                {
                        ?doc ?p0 ?lit .
                }
                UNION
                {
                        ?concept ?p2 ?lit .
                        ?doc ?p1 ?concept . 
                } .
                ?doc dcterms:relation ?image . FILTER regex(str(?image), "still")
                ?doc dcterms:format ?format . FILTER regex(str(?format),"Video") .
                ?doc dcterms:relation ?av . FILTER regex(str(?av),"media") .
       }
[% END %]
[% MACRO get_sparql_base_q BLOCK %]
	[% PROCESS get_raw_sparql_base_q | collapse %]
[% END %]
[% MACRO get_sparql_base_q_count BLOCK %]
        [% PROCESS get_raw_sparql_base_q_count | collapse %]
[% END %]
[% queries = {} %]
[% fields = [] %]
[% FOREACH field IN conf.app.search.external_metadata_fields %]
        [% NEXT IF !args.hit.${field}.defined %]
        [% fields.push(field) %]
        [% queries.${field} = args.hit.${field}.0.to_external_query(field,{"num"=>4,"minlength"=>3}) %]
[% END %]

[% sparql_base_q = get_sparql_base_q.escape_quotes() %]
[% sparql_base_q_count = get_sparql_base_q_count.escape_quotes() %]

<script type="text/javascript">
var xml_namespaces = JSON.parse("[% conf.xml.namespace.to_json().escape_quotes() %]");
</script>
<link rel="stylesheet" href="[% conf.all.rooturl %]/css/sparql.css" type="text/css" media="screen" />
<script type="text/javascript" src="[% conf.all.rooturl %]/js/sparql.js"></script>
<script type="text/javascript">

	//variabelen
	var fields = JSON.parse("[% fields.to_json().escape_quotes() %]");
        var queries = JSON.parse("[% queries.to_json().escape_quotes() %]");
	var field_index_selected = 0;
        var rooturl = "[% conf.all.rooturl %]";
	var originurl = "[% conf.all.originurl %]";
	var sparql_base_q = "[% sparql_base_q %]";
	var sparql_base_q_count = "[% sparql_base_q_count %]";
	var sparql_q;
	var sparql_base_url = "[% conf.app.search.sparql.server %]";
	var sparql;
	var sparql_div_id = "sparql_div";
	var sparql_images_div_id = "#"+ sparql_div_id+" #images";
	var sparql_paging_div_id = "#"+ sparql_div_id+" #paging";
	var sparql_count_results = 0;
	var offset = 0;
	var limit = 5;
	var no_related_media_found = "no related media found";

	//sparql
	function init_sparql(url){
		sparql = new SPARQL.Service(url);
	}
	function get_sparql_results(q,prefixes,callback_success,callback_failure,transform){
                sparql.setOutput("json");
                var query = sparql.createQuery();
                for(key in prefixes){
                        query.setPrefix(key,prefixes[key]);
                }
                if(transform == "selectValueArrays"){
                        query.selectValueArrays(q,{
                                failure:callback_failure,
                                success:callback_success
                        });
                }else if(transform == "selectValueHashes"){
                        query.selectValueHashes(q,{
                                failure:callback_failure,
                                success:callback_success
                        });
                }else{
                        query.selectSingleValue(q,{
                                failure:callback_failure,
                                success:callback_success
                        });
                }
        }
	//helper functies
	function escape_query (s){
		s = s.replace(/('|")/g,"\\$1");
		return s.replace("\\\\","\\\\\\\\");
	}
	//set variabelen
	function set_sparql_q(q_string){
		sparql_q = sparql_base_q.replace('%offset',offset);
		sparql_q = sparql_q.replace('%limit',limit);
		sparql_q = sparql_q.replace("%lucene_query",escape_query(q_string));
	}
	function set_sparql_q_count(q_string){
                sparql_q_count = sparql_base_q_count.replace('%lucene_query',escape_query(q_string));
        }
	//paging
	function is_loading(){
		$(sparql_images_div_id).html(" loading content.. ");
	}
	function prev(){
		if(offset - limit < 0)return;
		offset-=limit;
		is_loading();
		set_sparqle_paging_div();
		set_sparql_q(queries[fields[field_index_selected]]);
		set_sparql_images(sparql_q);
	}
	function next(){
		if(offset + limit >= sparql_count_results)return;
		offset+=limit;
		is_loading();
		set_sparqle_paging_div();	
		set_sparql_q(queries[fields[field_index_selected]]);
		set_sparql_images(sparql_q);
	}
	//callbacks
	function sparql_q_count_callback_failure(data){
		$(sparql_images_div_id).html("Could not retrieve information from the sparql-server");
        }
	function sparql_q_count_callback_success(num){
                sparql_count_results = num;
		set_sparqle_paging_div();
        }
	function sparql_q_callback_failure(data){
		 $(sparql_images_div_id).html("Could not retrieve information from the sparql-server");
        }
        function sparql_q_callback_success(json){
		set_sparqle_images_div(json);
	}
	//set divs
	function set_sparqle_paging_div(){
		if(sparql_count_results > limit){
                        var paging = $(sparql_paging_div_id);
                        paging.html("");
                        if(offset >= limit){
                                var prev = document.createElement("a");
                                prev.innerHTML = "&lt; previous";    
                                prev.setAttribute("onclick","prev();return false;");
				prev.setAttribute("href","#");
                                paging.append(prev);
                        }
                        if(offset + limit < sparql_count_results){
                                var next = document.createElement("a");
                                next.innerHTML = "next &gt;";
                                next.setAttribute("onclick","next();return false;");
				next.setAttribute("href","#");
                                paging.append(next);
                        }
                }
	}
	function set_sparqle_images_div(json){
		var div_images = $(sparql_images_div_id);
		div_images.html("");
		if(json["image"].length==0){
			div_images.html(no_related_media_found);
			return;
		}

		for(var i = 0;i<json["doc"].length;i++){
			if(!json["image"][i])continue;
			var div_block = document.createElement("div");
			div_block.setAttribute("class","bl");
			div_block.setAttribute("className","bl");
			var div_imgholder = document.createElement("div");
			div_imgholder.setAttribute("class","imgh");
			div_imgholder.setAttribute("className","imgh");
			
			var img = new Image();
			img.src = json["image"][i];
			img.setAttribute("title",json["title"][i]);
			if(img.width){
				var wratio = 1;
				var hratio = 1;
				if(img.width > 90)wratio = 90 / img.width;
				if(img.height > 60)hratio = 60 / img.height;
				var ratio = hratio < wratio ? hratio:wratio;
				img.height = img.height * ratio;
				img.width = img.width * ratio;
				$(img).css({"width":img.width,"height":img.height});
			}else{
				img.width = 80;
			}
		
			var av_icon = document.createElement("img");
			av_icon.setAttribute("class","av_icon");
			av_icon.setAttribute("className","av_icon");
			av_icon.setAttribute("src",rooturl+"/images/icons/Video.png");
			av_icon.setAttribute("title","watch");

			var av_media_link = document.createElement("a");
			var video_player_url = originurl+"/videostreaming/external?";
			video_player_url+="thumbnail_url="+encodeURIComponent(json["image"][i]);
			video_player_url+="&video_url="+encodeURIComponent(json["av"][i]);
			av_media_link.setAttribute("href",video_player_url);
			av_media_link.setAttribute("target","_blank");

			av_media_link.appendChild(av_icon);				
			div_imgholder.appendChild(av_media_link);

			var a = document.createElement("a");
			a.setAttribute("href",json["doc"][i]);
			a.setAttribute("title",json["doc"][i]);
			a.setAttribute("target","_blank");
			a.appendChild(img);
		
			div_imgholder.appendChild(a.cloneNode(true));
			div_block.appendChild(div_imgholder);


			var caption = document.createElement("div");
			caption.setAttribute("class","cp");
			caption.setAttribute("className","cp");
			var a_title = document.createElement("a");
			a_title.setAttribute("href",json["doc"][i]);
                        a_title.setAttribute("title",json["doc"][i]);
                        a_title.setAttribute("target","_blank");
			a_title.innerHTML = json["title"][i];
			caption.appendChild(a_title);

			div_block.appendChild(caption);

			div_images.append(div_block);
		}
		var clearall = document.createElement("div");
		clearall.setAttribute("style","clear:both");
		clearall.style.cssText = "clear:both";//voor IE
		div_images.append(clearall);
	}
	//haal resultaten op voor divs
	function set_sparql_images(q){
		get_sparql_results(q,xml_namespaces,sparql_q_callback_success,sparql_q_callback_failure,"selectValueArrays");
	}
	function set_sparql_paging(q){
		get_sparql_results(q,xml_namespaces,sparql_q_count_callback_success,sparql_q_count_callback_failure,"selectSingleValue");
	}
	//functie op te laden
	$(document).ready(function(){
		init_sparql(sparql_base_url);
		if(!sparql)return;
		is_loading();
		set_sparql_q_count(queries[fields[field_index_selected]]);
		set_sparql_paging(sparql_q_count);
		set_sparql_q(queries[fields[field_index_selected]]);
		set_sparql_images(sparql_q);
	});
</script>
<div class="band" id="sparql_div">
	<h1>[% tt_title_search_record_related_media %]:</h1>
	<div id="paging"></div>
	<div id="images"></div>
	<div style="clear:both"></div>
</div>
